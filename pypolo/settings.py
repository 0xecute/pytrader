"""
Django settings for pypolo project.

Generated by 'django-admin startproject' using Django 1.9.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '))iy*8&jyl3s6m58g(z=6xo5yq^hl^-ppk$v-h-pd#@fhn&k@0'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
MAKE_TRADES = True

ALLOWED_HOSTS = ['trader.owocki.com', '45.55.42.224']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'history',
    'chartit',
]

MIDDLEWARE_CLASSES = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'pypolo.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['history/templates/', ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


WSGI_APPLICATION = 'pypolo.wsgi.application'


# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'MST'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]

# logfile
LOG_FILE = "/var/log/django.log"

# Default number of threads for workers
NUM_THREADS = 1

# https://poloniex.com/fees/
FEES = [
    {'maker': 0.0015, 'taker': 0.0025, 'volume': '< 600 BTC'},
    {'maker': 0.0014, 'taker': 0.0024, 'volume': '>= 600 BTC'},
    {'maker': 0.0012, 'taker': 0.0022, 'volume': '>= 1200 BTC'},
    {'maker': 0.001, 'taker': 0.0020, 'volume': '>= 2400 BTC'},
    {'maker': 0.0008, 'taker': 0.0016, 'volume': '>= 6000 BTC'},
    {'maker': 0.0005, 'taker': 0.0014, 'volume': '>= 12000 BTC'},
    {'maker': 0.0002, 'taker': 0.0012, 'volume': '>= 18000 BTC'},
    {'maker': 0.0000, 'taker': 0.0010, 'volume': '>= 24000 BTC'},
]

TRADE_VOLUME_TRAILING_30_DAYS = '< 600 BTC'  # TODO - in the future, make this calculated dynamically
TRADE_MODE = 'taker'  # TODO -- in the future, make this more dynamicly chosen via trade.py

# sets how aggressive user wants to be in managing their trades
# 1 = trade when if & when projected profit >= fees
# 2 = trade when if & when projected profit >= 2x fees
# . . .
# n = trade when if & when projected profit >= nx fees
FEE_MANAGEMENT_STRATEGY = 1

# Include local settings overrides
try:
    from pypolo.local_settings import *  # NOQA
    INSTALLED_APPS += DEBUG_APPS
except (ImportError, NameError) as exp:
    print 'Failed to load pypolo/local_settings.py because: %s' % exp
